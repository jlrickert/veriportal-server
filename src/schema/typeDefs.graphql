type Query {
  """Get the currently logged in user"""
  me: User!

  """fetch a user with the given id"""
  user(username: ID!): User!

  """fetch users"""
  users(params: UsersFilterInput): [User!]

  """fetch document"""
  document(id: ID!): Document!

  """fetch documents"""
  documents: [Document!]
}

type Mutation {
  """
  Login with username and password. Returns a jwt that may be placed in the
  Authorization header. Ex. `Authorization: Bearer dsfi324jsonwebtoken234asd`
  """
  login(username: String!, password: String!): AuthPayload!

  """Get a new jwt for authentication"""
  refreshToken(token: String!): AuthPayload!

  """revokes the user's tokens, effectively logging the user out"""
  revokeToken: User

  """Update the current user password"""
  updatePassword(password: String!): AuthPayload!

  """Creates a new account if username is not taken"""
  signup(params: SignupInput): AuthPayload!
}

type User {
  username: ID!
  firstName: String
  lastName: String
  admin: Boolean!
  documents: [Document!]
}

type AuthPayload {
  user: User!
  token: String!
  refreshToken: String!
}

type Document {
  id: ID!
  name: String!
  author: String
  dueDate: String
  description: String
  links: [String!]
  docType: String!
}

input SignupInput {
  username: String!
  password: String!
  firstName: String
  lastName: String
}

input UsersFilterInput {
  limit: Int
  offset: Int
}
